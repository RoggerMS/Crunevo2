#!/usr/bin/env python3
"""
Script para simular exactamente lo que hace el frontend al crear bloques
y diagnosticar el problema "Error al crear el bloque"
"""

import os
import sys
import requests
import json
from urllib.parse import urljoin

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_frontend_simulation():
    """Simula exactamente lo que hace el frontend"""
    print("=== SIMULACI√ìN FRONTEND ===\n")
    
    # Configurar la URL base
    base_url = "http://localhost:5000"  # Ajustar seg√∫n tu configuraci√≥n
    
    # Simular una sesi√≥n de navegador
    session = requests.Session()
    
    try:
        # 1. Primero obtener la p√°gina principal para conseguir el CSRF token
        print("1. Obteniendo CSRF token...")
        response = session.get(urljoin(base_url, "/personal-space"))
        
        if response.status_code != 200:
            print(f"‚ùå Error al acceder a personal-space: {response.status_code}")
            return False
            
        # Extraer CSRF token del HTML
        import re
        csrf_match = re.search(r'<meta name="csrf-token" content="([^"]+)"', response.text)
        if not csrf_match:
            print("‚ùå No se encontr√≥ el CSRF token en la p√°gina")
            return False
            
        csrf_token = csrf_match.group(1)
        print(f"‚úì CSRF token obtenido: {csrf_token[:20]}...")
        
        # 2. Simular la creaci√≥n de un bloque exactamente como lo hace el frontend
        print("\n2. Simulando creaci√≥n de bloque...")
        
        block_data = {
            "type": "nota",
            "title": "Nueva nota",
            "content": "",
            "metadata": {
                "color": "indigo",
                "icon": "bi-card-text"
            }
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrf_token,
            'X-Requested-With': 'XMLHttpRequest',
            'X-Device-Token': 'test-device-token'
        }
        
        print(f"Enviando datos: {json.dumps(block_data, indent=2)}")
        print(f"Headers: {json.dumps(headers, indent=2)}")
        
        # Hacer la petici√≥n POST
        response = session.post(
            urljoin(base_url, "/api/personal-space/blocks"),
            json=block_data,
            headers=headers
        )
        
        print(f"\nRespuesta del servidor:")
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        
        try:
            response_data = response.json()
            print(f"Datos de respuesta: {json.dumps(response_data, indent=2)}")
            
            if response.status_code == 200 and response_data.get('success'):
                print("\n‚úì ¬°Bloque creado exitosamente desde simulaci√≥n frontend!")
                
                # Limpiar el bloque de prueba
                block_id = response_data.get('block', {}).get('id')
                if block_id:
                    delete_response = session.delete(
                        urljoin(base_url, f"/api/personal-space/blocks/{block_id}"),
                        headers=headers
                    )
                    print(f"Bloque de prueba eliminado: {delete_response.status_code}")
                
                return True
            else:
                print(f"\n‚ùå Error en la respuesta: {response_data}")
                return False
                
        except json.JSONDecodeError:
            print(f"‚ùå Error al decodificar JSON. Respuesta raw: {response.text[:500]}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n. ¬øEst√° el servidor ejecut√°ndose?")
        print("   Ejecuta: python app.py")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_direct_api_call():
    """Prueba directa de la API sin simular navegador"""
    print("\n=== PRUEBA DIRECTA API ===\n")
    
    base_url = "http://localhost:5000"
    
    block_data = {
        "type": "nota",
        "title": "Nueva nota directa",
        "content": "",
        "metadata": {
            "color": "indigo",
            "icon": "bi-card-text"
        }
    }
    
    try:
        response = requests.post(
            urljoin(base_url, "/api/personal-space/blocks"),
            json=block_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"Status Code: {response.status_code}")
        print(f"Respuesta: {response.text[:500]}")
        
        if response.status_code == 403:
            print("\n‚úì Error 403 esperado (falta CSRF token)")
            return True
        else:
            print(f"\n‚ùå Respuesta inesperada: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    print("DIAGN√ìSTICO DE CREACI√ìN DE BLOQUES - SIMULACI√ìN FRONTEND\n")
    print("Este script simula exactamente lo que hace el navegador")
    print("para identificar d√≥nde est√° fallando la creaci√≥n de bloques.\n")
    
    # Verificar que el servidor est√© ejecut√°ndose
    try:
        response = requests.get("http://localhost:5000", timeout=5)
        print("‚úì Servidor detectado en http://localhost:5000\n")
    except:
        print("‚ùå No se puede conectar al servidor en http://localhost:5000")
        print("   Por favor, ejecuta: python app.py\n")
        sys.exit(1)
    
    # Ejecutar pruebas
    frontend_success = test_frontend_simulation()
    api_success = test_direct_api_call()
    
    print("\n=== RESUMEN ===\n")
    
    if frontend_success:
        print("‚úì La simulaci√≥n frontend funciona correctamente")
        print("\nüîç POSIBLES CAUSAS DEL PROBLEMA:")
        print("   1. Problema espec√≠fico del navegador (cach√©, cookies)")
        print("   2. Conflicto con otros scripts JavaScript")
        print("   3. Problema de timing en el frontend")
        print("   4. Error en el manejo de respuestas as√≠ncronas")
        print("\nüí° RECOMENDACIONES:")
        print("   - Limpiar cach√© del navegador")
        print("   - Revisar la consola del navegador para errores JS")
        print("   - Verificar que no hay conflictos entre scripts")
    else:
        print("‚ùå La simulaci√≥n frontend tambi√©n falla")
        print("\nüîç El problema est√° en el backend o configuraci√≥n del servidor")
        print("\nüí° RECOMENDACIONES:")
        print("   - Revisar logs del servidor Flask")
        print("   - Verificar configuraci√≥n de CSRF")
        print("   - Comprobar middleware y filtros de seguridad")
    
    if api_success:
        print("\n‚úì La protecci√≥n CSRF funciona correctamente")
    else:
        print("\n‚ùå Problema con la protecci√≥n CSRF")