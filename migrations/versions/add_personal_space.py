"""Add personal space functionality

Revision ID: add_personal_space
Revises: add_internship_models
Create Date: 2025-01-05 12:00:00.000000

"""

from alembic import op
import sqlalchemy as sa


def has_table(name: str, conn) -> bool:
    inspector = sa.inspect(conn)
    return name in inspector.get_table_names()


# revision identifiers, used by Alembic.
revision = "add_personal_space"
down_revision = "add_internship_models"
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    if not has_table("personal_block", conn):
        # drop leftover sequence from aborted attempts to avoid duplicate sequence errors
        op.execute(sa.text("DROP SEQUENCE IF EXISTS personal_block_id_seq CASCADE"))
        op.create_table(
            "personal_block",
            sa.Column("id", sa.Integer(), primary_key=True),
            sa.Column("user_id", sa.Integer(), nullable=False),
            sa.Column("block_type", sa.String(length=50), nullable=False),
            sa.Column("title", sa.String(length=200), nullable=True, default=""),
            sa.Column("content", sa.Text(), nullable=True, default=""),
            sa.Column("metadata", sa.Text(), nullable=True, default="{}"),
            sa.Column("order_position", sa.Integer(), nullable=True, default=0),
            sa.Column("is_featured", sa.Boolean(), nullable=True, default=False),
            sa.Column("color", sa.String(length=20), nullable=True, default="indigo"),
            sa.Column(
                "icon", sa.String(length=50), nullable=True, default="bi-card-text"
            ),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
            if_not_exists=True,
        )
        op.create_index(
            op.f("ix_personal_block_user_id"),
            "personal_block",
            ["user_id"],
            unique=False,
        )
        op.create_index(
            op.f("ix_personal_block_block_type"),
            "personal_block",
            ["block_type"],
            unique=False,
        )
        op.create_index(
            op.f("ix_personal_block_order_position"),
            "personal_block",
            ["order_position"],
            unique=False,
        )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_personal_block_order_position"), table_name="personal_block")
    op.drop_index(op.f("ix_personal_block_block_type"), table_name="personal_block")
    op.drop_index(op.f("ix_personal_block_user_id"), table_name="personal_block")
    op.drop_table("personal_block", if_exists=True)
    # ### end Alembic commands ###
